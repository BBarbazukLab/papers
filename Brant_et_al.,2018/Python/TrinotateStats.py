# coding: utf-8

"""TrinotateStats.py: A very simple script for pulling BLAST results from the acomys_annotation.xls file generated by Trinotate. Meant as a one-off script and needs work for general application."""

__author__ = "J. Lucas Boatwright"

import re
from collections import Counter
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

def dict_max_merge(dict1, dict2):
    """For two dictionaries, merge them keeping the max value
    when keys overlap"""

    dict3 = {}
    for key, value in dict1.items():
        if (key in dict1) and (key in dict2):
            dict3[key]=max(value, dict2[key])
        else:
            dict3[key]=value
    for key, value in dict2.items():
        if key not in dict3:
            dict3[key]=value
    return dict3

sprotXcount = 0
sprotXunique = []
sprotPcount = 0
sprotPunique = []

emblXcount = 0
emblXunique = []
emblPcount = 0
emblPunique = []

totalHit = 0

with open("trinotate_annotation_report.xls",'r') as f:
    for line in f:
        split_line = line.split("\t")

        sprotXhit = re.findall(pattern="^\w+_\w+",string=split_line[2])
        if sprotXhit:
            gene_species = sprotXhit[0].split("_")
            sprotXunique.append((gene_species[0],gene_species[1]))

        sprotPhit = re.findall(pattern="^\w+_\w+",string=split_line[7])
        if sprotPhit:
            gene_species = sprotPhit[0].split("_")
            sprotPunique.append((gene_species[0],gene_species[1]))

        emblXhit = re.findall(pattern="^\w+_\w+",string=split_line[3])
        if emblXhit:
            gene_species = emblXhit[0].split("_")
            emblXunique.append((gene_species[0],gene_species[1]))

        emblPhit = re.findall(pattern="^\w+_\w+",string=split_line[8])
        if emblPhit:
            gene_species = emblPhit[0].split("_")
            emblPunique.append((gene_species[0],gene_species[1]))

        if sprotXhit:
            sprotXcount += 1
        if sprotPhit:
            sprotPcount += 1
        if emblXhit:
            emblXcount += 1
        if emblPhit:
            emblPcount += 1
        if (sprotXhit or sprotPhit or emblXhit or emblPhit):
            totalHit += 1

    sprotXtaxa = {x[0]:x[1] for x in sprotXunique[1:]}
    sprotPtaxa = {x[0]:x[1] for x in sprotPunique[1:]}    
    emblXtaxa = {x[0]:x[1] for x in emblXunique[1:]}
    emblPtaxa = {x[0]:x[1] for x in emblPunique[1:]}

    print("sprotXcount: {0}".format(sprotXcount))
    print("sprotPcount: {0}".format(sprotPcount))
    print("emblXcount: {0}".format(emblXcount))
    print("emblPcount: {0}".format(emblPcount))
    print("totalHit: {0}".format(totalHit))

    print("sprotXtaxa top 10:")
    taxa1 = {i[0]:i[1] for i in Counter(list(sprotXtaxa.values())).most_common(10)}
    print(taxa1)

    print("sprotPtaxa top 10:")
    taxa2 = {i[0]:i[1] for i in Counter(list(sprotPtaxa.values())).most_common(10)}
    print(taxa2)
    
    print("emblXtaxa top 10:")
    taxa3 = {i[0]:i[1] for i in Counter(list(emblXtaxa.values())).most_common(10)}
    print(taxa3)

    print("emblPtaxa top 10:")
    taxa4 = {i[0]:i[1] for i in Counter(list(emblPtaxa.values())).most_common(10)}
    print(taxa4)

    df = pd.DataFrame([taxa1, taxa2, taxa3, taxa4], index=["sprotX","sprotP","emblX","emblP"])
    print(df)
    all_species = dict_max_merge(dict_max_merge(dict_max_merge(taxa1, taxa2), taxa3), taxa4)
    sort_order = [key for key, value in sorted(all_species.iteritems(), key=lambda (k,v): (v,k))]
    print(sort_order)
    # Take only top 13 as they are over 500 hits
    df = df[sort_order[len(sort_order)-13:]]
    print(df)

    df.plot(kind="bar", colormap='inferno', rot=True)
    plt.ylabel("Hits")
    plt.xlabel("Taxa")
    plt.show()
