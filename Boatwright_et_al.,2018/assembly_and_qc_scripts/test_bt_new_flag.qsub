#!/bin/bash
#PBS -M ammorse@ufl.edu
#PBS -m n
#PBS -r n
#PBS -j oe
#PBS -o /scratch/lfs/mcintyre/trago/scripts/PBS_LOGS/aln_2_ortho
#PBS -l walltime=120:00:00
#PBS -l nodes=1:ppn=1
#PBS -l pmem=100gb
#PBS -q bio


module load bowtie/0.12.9
module load last/247
module load python/2.7.3

#### Store number of processors used -- i.e. number of files to split into to run LAST
    NUMPROCS=4

#### Set directories and variables
    PROJ=/scratch/lfs/mcintyre/trago
    OUTPUT=/scratch/lfs/mcintyre/trago/aln_test/new_flag

#### Set Different References
    REF=$PROJ/references/Tdu_common_ortho_pipe
    LASTREF=$PROJ/references/Tdu_common_ortho_pipe

#### Create LOG directory and start log
    LOGS=$OUTPUT/job_logs              #script log information
    ALN_ERROR_LOG=$LOGS/size_errors.txt
    if [ ! -d $LOGS ]; then mkdir -p $LOGS; fi

    MYLOG=$LOGS/test_to_Tdu_ortho.log
    printf "`date` SGE_ID:$PBS_ARRAYID HOSTNAME:$HOSTNAME \n\n" > $MYLOG

    ALNLOGS=$OUTPUT/aln_logs       
    if [ ! -d $ALNLOGS ]; then mkdir -p $ALNLOGS; fi


#### for each species, combine R1 and R2 (treating as single end) and lanes (reps separate)
    cat ${PROJ}/aln_test/list_R*.fastq > $TMPDIR/test_flag.fastq


#### FUNCTIONS FOR ALIGNMENT PIPELINE ####

#### Start alignment pipeline
    printf  '<----------------- STARTING  SE alignment for ${SP}_${REP} [`date`] ----------------->'
    READS=$TMPDIR/test_flag.fastq

#### If empty stop early

    if [ ! -s $READS ]
    then
        echo "WARNING: Input File is empty terminating early, [`date`]" >>$MYLOG
        echo "Script complete, [`date`]" >>$MYLOG
        exit
    fi

#### Determine my quality FASTQ score type
        qual=`python /scratch/lfs/mcintyre/python.git/identify_quality.py -i $READS`
        if [ $qual == 'phred64' ];
        then
            # set to old illumina quality scores phred64/solexa 1.3
            btqual='--phred64-quals'
            lastqual='3'
        else
            # change to sanger format which is what all new illumina data is
            btqual='--phred33-quals'
            lastqual='1'
        fi

cd $TMPDIR

#### run bowtie uniq
    echo "START Single End bowtie [`date`]" >>$MYLOG
    bowtie -S \
           $btqual \
           --best \
           --tryhard \
           --strata \
           --chunkmbs 1024 \
	   --sam-no-qname-trunc \
           -p $NUMPROCS \
           -m 1 \
           -v 3 \
           --un test_unaln_bt.fq \
           --max test_ambig_bt.fq \
           $REF \
           $READS \
           2>$ALNLOGS/test_2_Tdu_bowtie.log \
	   | perl -ne 'if(/^@/){next} @s = split("\t"); if($s[1] != 4) {print}' \
           > $TMPDIR/test_aln_bt.sam \
           2>>$MYLOG
        echo "FINISH Single End bowtie [`date`]" >>$MYLOG

        if [ ! -e test_unaln_bt.fq ]
        then
            echo "WARNING: There were no unaligned reads" >> $MYLOG
        fi

        cat test_unaln_bt.fq test_ambig_bt.fq > test_unaln_bt.fq
        
        READS=test_unaln_bt.fq

#### LAST unique

    # The following Python script turns READS into NUMPROCS separate files, going from 0-split.fq to (NUMPROCS-1)-split.fq. 
    # READS is the location where the output files are placed

        python /scratch/lfs/mcintyre/python.git/SeparateLast.py $READS $NUMPROCS

    # START LAST for each of the NUMPROCS new -split files
        echo "START Single End LAST [`date`]" >>$MYLOG
        for ((I=0; I<$NUMPROCS; I++))
        do
                READS=${I}-split.fq

                lastal \
                    -l 25 \
                    -Q $lastqual \
                    $LASTREF \
                    $READS \
                    2>>$MYLOG \
                    >${I}_last.maf &
        done
        wait

        echo "FINISH Single End LAST [`date`]" >>$MYLOG

        rm *-split.fq


 # Convert MAF to SAM
        echo "START Converting from MAF to SAM [`date`]" >>$MYLOG
        for ((I=0; I<$NUMPROCS; I++))
        do
            maf-convert.py sam ${I}_last.maf > ${I}_last.sam 2>>$MYLOG &
        done
        wait

        rm *_last.maf

        echo "FINISH Converting to SAM [`date`]" >>$MYLOG

        for ((I=0; I<$NUMPROCS; I++))
        do
            cat ${I}_last.sam >> ${SP}_${REP}_last.sam
            rm ${I}_last.sam
        done

    # PARSE LAST FILES
        echo "START Parsing LAST SAM file into unique and ambiguous [`date`]" >>$MYLOG
        perl /scratch/lfs/mcintyre/trago/scripts/parse_last_sam_v2.pl \
            test_last.sam \
            test_ambig_last.sam \
            test_uniq_last.sam \
            > $ALNLOGS/test_2_Tdu_LAST.log

        rm test_last.sam test_ambig_last.sam

        echo "FINISH Parsing LAST SAM file into unique and ambiguous [`date`]" >>$MYLOG

#### File Check
    cd $TMPDIR
    echo "FILE SIZE CHECK">>$MYLOG
    du -sh *.sam >>$MYLOG

#### Combine all Sam files
    echo "START Combine SAM files">>$MYLOG
    cat *.sam >$OUTPUT/test_to_Tdu_ortho_pipe.sam 2>>$MYLOG
    echo "FINISH Combining SAM files [`date`]" >>$MYLOG

echo "Script complete, [`date`]" >>$MYLOG


