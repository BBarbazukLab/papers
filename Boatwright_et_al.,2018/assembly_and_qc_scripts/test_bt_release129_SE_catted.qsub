#!/bin/bash
#PBS -M ammorse@ufl.edu
#PBS -N rel12_bt_SE_cat_2
#PBS -m n
#PBS -r n
#PBS -j oe
#PBS -o /scratch/lfs/mcintyre/trago/scripts/PBS_LOGS/aln_2_ortho
#PBS -l walltime=120:00:00
#PBS -l nodes=1:ppn=1
#PBS -l pmem=100gb
#PBS -q bio
#PBS -t 1

### total of 6 rows - 2 hybrids, 3 reps
### aligning Tm and Tms reads to Tdu (paternal parent) common orthos 
### ref names have pipes instead of commas

module load bowtie/0.12.9
module load last/247
module load python/2.7.3

#### Store number of processors used -- i.e. number of files to split into to run LAST
    NUMPROCS=4

#### Set directories and variables
    PROJ=/scratch/lfs/mcintyre/trago
    OUTPUT=/scratch/lfs/mcintyre/trago/aln_test/release12_SE_catted

#### Using SGE Array to pull in species (all caps and not)  from external csv 
    DESIGN_FILE=$PROJ/design_files/trago_hybrids_with_reps.txt
    DESIGN=$(cat $DESIGN_FILE | head -n $PBS_ARRAYID | tail -n 1)

    IFS=',' read -ra ARRAY <<< "$DESIGN"

    SP=${ARRAY[0]}
    REP=${ARRAY[1]}

#### Set Different References
    REF=$PROJ/references/Tdu_common_ortho_pipe
    LASTREF=$PROJ/references/Tdu_common_ortho_pipe

#### Create LOG directory and start log
    LOGS=$OUTPUT/job_logs              #script log information
    ALN_ERROR_LOG=$LOGS/size_errors.txt
    if [ ! -d $LOGS ]; then mkdir -p $LOGS; fi

    MYLOG=$LOGS/${SP}_${REP}_to_Tdu_ortho.log
    printf "`date` $SP SGE_ID:$PBS_ARRAYID HOSTNAME:$HOSTNAME \n\n" > $MYLOG

    ALNLOGS=$OUTPUT/aln_logs       
    if [ ! -d $ALNLOGS ]; then mkdir -p $ALNLOGS; fi


#### for each species, combine R1 and R2 (treating as single end) and lanes (reps separate)

     cat ${PROJ}/aln_test/list_R*.fastq > $TMPDIR/${SP}_${REP}.fastq

#### FUNCTIONS FOR ALIGNMENT PIPELINE ####

#### Start alignment pipeline
    printf  '<----------------- STARTING  SE alignment for ${SP}_${REP} [`date`] ----------------->'
    READS=$TMPDIR/${SP}_${REP}.fastq

#### If empty stop early

    if [ ! -s $READS ]
    then
        echo "WARNING: Input File is empty terminating early, [`date`]" >>$MYLOG
        echo "Script complete, [`date`]" >>$MYLOG
        exit
    fi

#### Determine my quality FASTQ score type
        qual=`python /scratch/lfs/mcintyre/python.git/identify_quality.py -i $READS`
        if [ $qual == 'phred64' ];
        then
            # set to old illumina quality scores phred64/solexa 1.3
            btqual='--phred64-quals'
            lastqual='3'
        else
            # change to sanger format which is what all new illumina data is
            btqual='--phred33-quals'
            lastqual='1'
        fi

cd $TMPDIR

#### run bowtie uniq
    echo "START Single End bowtie [`date`]" >>$MYLOG
    bowtie -S \
           $btqual \
           --best \
           --tryhard \
           --strata \
           --chunkmbs 1024 \
           -p $NUMPROCS \
           -m 1 \
           -v 3 \
           --un ${SP}_${REP}_unaln_bt.fq \
           --max ${SP}_${REP}_ambig_bt.fq \
           $REF \
           $READS \
           2>$ALNLOGS/${SP}_${REP}_2_Tdu_bowtie.log \
           $TMPDIR/${SP}_${REP}_aln_bt.sam \
           2>>$MYLOG
        echo "FINISH Single End bowtie [`date`]" >>$MYLOG

        if [ ! -e ${SP}_${REP}_unaln_bt.fq ]
        then
            echo "WARNING: There were no unaligned reads" >> $MYLOG
        fi

        cp ${SP}_${REP}_unaln_bt.fq /$PROJ/aln_test/release12_SE_catted/${SP}_${REP}_unaln_bt.fq
        cp {SP}_${REP}_ambig_bt.fq /$PROJ/aln_test/release12_SE_catted/{SP}_${REP}_ambig_bt.fq
        cp $TMPDIR/${SP}_${REP}_aln_bt.sam /$PROJ/aln_test/release12_SE_catted/${SP}_${REP}_aln_bt.sam


